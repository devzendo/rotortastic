# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

executors:
  node_executor:
    docker:
      - image: circleci/node:12.14.1
    environment:
      AWS_DEFAULT_REGION: eu-west-2

jobs:
  test:
    executor: node_executor
    steps:
      - run:
          name: Check node and npm versions
          command: |
            node --version
            npm --version
      - checkout
      - run:
          name: Setup
          command: |
            sudo apt-get update && sudo apt-get install python python-pip libpython-dev jq
            sudo pip install awscli
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Test
          command: npm run test
      - store_test_results:
          path: "./reports/junit"
      - store_artifacts:
          path: "./coverage"

  build-and-publish-to-development:
    executor: node_executor
    steps:
      - checkout
#      - run:
#          name: Setup
#          command: |
#            sudo apt-get update && sudo apt-get install python python-pip libpython-dev jq
#            sudo pip install awscli
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Build
          command: |
            npm run build:dev
            # npm run storybook:build:dev
#      - store_artifacts:
#          path: build
      - run:
          name: Deploy to development
          command: |
            cat \<< EOF > dist/aws-credentials.json
            {
              "accessKeyId": "${AWS_ACCESS_KEY_ID}",
              "secretAccessKey": "${AWS_SECRET_ACCESS_KEY}",
              "region": "${AWS_DEFAULT_REGION}"
            }
            EOF
            # s3-upload has to be run from the directory containing the aws-upload.conf.js file but I want the files
            # in the S3 bucket to be placed directly there, not in a 'dist' folder, so the files in the config file
            # should not be prefixed with 'dist', and the two config files are now copied to dist...
            cp aws-upload.conf.js dist
            (cd dist && npx s3-upload)

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - test:
          context: aws-dev
          filters:
            branches:
              only: main
      - build-and-publish-to-development:
          context: aws-dev
          filters:
            branches:
              only: main
          requires:
            - test
